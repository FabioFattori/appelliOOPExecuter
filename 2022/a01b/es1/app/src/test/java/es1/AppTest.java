/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package es1;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import java.util.stream.Collectors;

class AppTest {
    private FlattenerFactory factory;

	
	public void init() {
		this.factory = new FlattenerFactoryImpl();
	}

	@ Test
	public void testSumEach() {
        init();
		Flattener<Integer,Integer> f = this.factory.sumEach();
		// ogni inner list produce in uscita la somma dei suoi elementi, ossia 1+2+3+4, 0, 20, 10+10+10, 0
		assertEquals(List.of(10, 0, 20, 30, 0),
			f.flatten(List.of(List.of(1,2,3,4), List.of(), List.of(20), List.of(10,10,10), List.of(0))));
	}

	@Test
	public void testFlattenAll() {
        init();
		Flattener<String,String> f = this.factory.flattenAll();
		// tutte le inner list vengono appese l'un l'altra producendo la lista in output
		assertEquals(List.of("a","b","c","d","e"),
			f.flatten(List.of(List.of("a","b"), List.of(), List.of("c"), List.of("d","e"))));
	}

	@Test
	public void testConcatPairs() {
        init();
		Flattener<String,String> f = this.factory.concatPairs();
		// le inner list vengono prese a coppie: per ogni coppia si uniscono tutte le loro stringhe
		// se c'è una inner list finale la si tratta da sola
		assertEquals(List.of("abc","cdef","gh"),
			f.flatten(List.of(List.of("a","b"), List.of("c"), List.of("c","d","e"),List.of("f"),List.of("g","h"))));
		assertEquals(List.of("abc","cdef"),
			f.flatten(List.of(List.of("a","b"), List.of("c"), List.of("c","d"),List.of("e", "f"))));
	}

	@Test
	public void testEach() {
        init();
		Flattener<String,String> f = this.factory.each(l -> l.stream().collect(Collectors.joining()));
		// ogni inner list produce la concatenazione dei suoi elementi -- che sono stringhe
		assertEquals(List.of("ab","c","cde","f","g"),
			f.flatten(List.of(List.of("a","b"), List.of("c"), List.of("c","d","e"),List.of("f"),List.of("g"))));
		Flattener<String,Integer> f2 = this.factory.each(l -> l.size());
		// ogni inner list produce la sua lunghezza
		assertEquals(List.of(2,1,3,1,1),
			f2.flatten(List.of(List.of("a","b"), List.of("c"), List.of("c","d","e"),List.of("f"),List.of("g"))));
	}

	@Test
	public void testSumVectors() {
        init();
		Flattener<Integer,Integer> f = this.factory.sumVectors();
		// l'output è prodotto a fine iterazione: le inner list sono considerate come vettori (nel senso dell'algebra) da sommare
		assertEquals(List.of(1111, 2222, 3333),
			f.flatten(List.of(List.of(1,2,3), List.of(10,20,30), List.of(100,200,300), List.of(1000,2000,3000))));
	}
}
